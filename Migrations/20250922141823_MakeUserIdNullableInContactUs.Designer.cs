// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using first_test.Data;

#nullable disable

namespace first_test.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250922141823_MakeUserIdNullableInContactUs")]
    partial class MakeUserIdNullableInContactUs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("first_test.Models.ContactUs", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"), 1L, 1);

                    b.Property<DateTime>("ContuctUs_date")
                        .HasColumnType("datetime2")
                        .HasColumnName("interview_date");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Message");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(252)
                        .HasColumnType("nvarchar(252)")
                        .HasColumnName("Subject");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nama");

                    b.HasKey("ContactId");

                    b.HasIndex("UserId");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("first_test.Models.CreateCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CategoryName");

                    b.HasKey("CategoryId");

                    b.ToTable("CreateCategory");
                });

            modelBuilder.Entity("first_test.Models.InterviewInformation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("companyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("companyName");

                    b.Property<int>("contact_number")
                        .HasColumnType("int")
                        .HasColumnName("contact_number");

                    b.Property<string>("interview_address")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("interview_date")
                        .HasColumnType("datetime2")
                        .HasColumnName("interview_date");

                    b.Property<string>("interview_result")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("interview_result");

                    b.Property<string>("job_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("jobname");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userid")
                        .IsUnique();

                    b.ToTable("InterviewInformation");
                });

            modelBuilder.Entity("first_test.Models.Jop", b =>
                {
                    b.Property<int>("job_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("job_id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.Property<int>("MaximumSalary")
                        .HasColumnType("int")
                        .HasColumnName("salary_max");

                    b.Property<int>("MinimumSalary")
                        .HasColumnType("int")
                        .HasColumnName("salary_min");

                    b.Property<int>("age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("country");

                    b.Property<string>("educational_level")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("educational_level");

                    b.Property<string>("government")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("government");

                    b.Property<string>("job_details")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("job_details");

                    b.Property<string>("job_field")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("job_field");

                    b.Property<string>("job_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("job_name");

                    b.Property<int>("number_of_employees")
                        .HasColumnType("int")
                        .HasColumnName("number_of_employees");

                    b.Property<string>("type_of_job")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("type_of_job");

                    b.Property<string>("years_of_experience")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("years_of_experience");

                    b.HasKey("job_id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("job");
                });

            modelBuilder.Entity("first_test.Models.PricPlan", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceId"), 1L, 1);

                    b.Property<string>("DescriptionPricin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("DescriptionPricin");

                    b.Property<string>("Subscriptiontype")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SubscriptionType");

                    b.Property<string>("subscriptionname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("subscriptionName");

                    b.Property<decimal>("subscriptionprice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("subscriptionPrice");

                    b.HasKey("PriceId");

                    b.ToTable("PricPlan");
                });

            modelBuilder.Entity("first_test.Models.Rigesteradmin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"), 1L, 1);

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AdminName");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNum")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("phone_num");

                    b.HasKey("AdminId");

                    b.ToTable("Rigesteradmin");
                });

            modelBuilder.Entity("first_test.Models.Rigesterempo", b =>
                {
                    b.Property<int>("Company_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Company_id"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password");

                    b.Property<int?>("PriceId")
                        .HasColumnType("int");

                    b.Property<string>("companyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("companyName");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("country");

                    b.Property<string>("emp_email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("emp_email");

                    b.Property<string>("emp_fname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("emp_fname");

                    b.Property<string>("emp_lname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("emp_lname");

                    b.Property<string>("emp_phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("emp_phone");

                    b.Property<string>("field_of_work")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("field_of_work");

                    b.Property<string>("government")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("government");

                    b.Property<string>("job_title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("job_title");

                    b.HasKey("Company_id");

                    b.HasIndex("PriceId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("first_test.Models.Rigesteruser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("country");

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("education_level");

                    b.Property<string>("ExperienceLevel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("experience_level");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<string>("Government")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("government");

                    b.Property<string>("JobName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("job_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNum")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone_num");

                    b.Property<string>("ProfilePhoto")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("profile_photo");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("first_test.Models.userwithjob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Userid")
                        .HasColumnType("int");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("job_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("job_name");

                    b.Property<int>("jobid")
                        .HasColumnType("int");

                    b.Property<string>("request_state")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.HasIndex("jobid");

                    b.ToTable("userwithjob");
                });

            modelBuilder.Entity("first_test.Models.ContactUs", b =>
                {
                    b.HasOne("first_test.Models.Rigesteruser", "Rigesterusera")
                        .WithMany("ContactUs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Rigesterusera");
                });

            modelBuilder.Entity("first_test.Models.InterviewInformation", b =>
                {
                    b.HasOne("first_test.Models.Rigesteruser", "User")
                        .WithOne("InterviewInformation")
                        .HasForeignKey("first_test.Models.InterviewInformation", "userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("first_test.Models.Jop", b =>
                {
                    b.HasOne("first_test.Models.CreateCategory", "Category")
                        .WithMany("Jop")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("first_test.Models.Rigesterempo", "Company")
                        .WithMany("jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("first_test.Models.Rigesterempo", b =>
                {
                    b.HasOne("first_test.Models.PricPlan", "PricingPlan")
                        .WithMany("Companies")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PricingPlan");
                });

            modelBuilder.Entity("first_test.Models.userwithjob", b =>
                {
                    b.HasOne("first_test.Models.Rigesteruser", "User")
                        .WithMany("userwithjobs")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("first_test.Models.Jop", "job")
                        .WithMany("userwithjobs")
                        .HasForeignKey("jobid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("job");
                });

            modelBuilder.Entity("first_test.Models.CreateCategory", b =>
                {
                    b.Navigation("Jop");
                });

            modelBuilder.Entity("first_test.Models.Jop", b =>
                {
                    b.Navigation("userwithjobs");
                });

            modelBuilder.Entity("first_test.Models.PricPlan", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("first_test.Models.Rigesterempo", b =>
                {
                    b.Navigation("jobs");
                });

            modelBuilder.Entity("first_test.Models.Rigesteruser", b =>
                {
                    b.Navigation("ContactUs");

                    b.Navigation("InterviewInformation");

                    b.Navigation("userwithjobs");
                });
#pragma warning restore 612, 618
        }
    }
}
